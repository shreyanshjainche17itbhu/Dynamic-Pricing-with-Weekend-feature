import pandas as pd
import numpy as np
import random
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.metrics import mean_squared_error as MSE
import warnings
import math
import seaborn as sns
import matplotlib.pyplot as plt
warnings.filterwarnings("ignore")
from datetime import datetime
from datetime import timedelta


# Create Custom Function
def date_range(start, end):
    delta = end - start
    days = [start + timedelta(days=i) for i in range(delta.days + 1)]
    return days
    
min_price = 4000
max_price = 14000
total_slots = 180
journey = 50
train_val_prop = 0.75
wastage_pct_min_range = 15
wastage_pct_max_range = 20
emptiness_threshold = 0.02
optimisation_day_bfr_jouney = 10

startDate = datetime(2022, 5, 1)
endDate = datetime(2022, 6, 30)     
datesRange = date_range(startDate, endDate)
datesRange = np.array(datesRange)
days = len(datesRange)
lst_days = list(range(1,days+1))

lst_df = []

for j in range(journey):
    lst_price = []
    weekday = []
    weekend = []
    prev_price = min_price
    for i in range((datetime.strptime('2022/6/30', "%Y/%m/%d") - datetime.strptime('2022/4/30', "%Y/%m/%d")).days):
        cur_price = min(prev_price + random.randint(0,200), max_price)
        prev_price = cur_price
        lst_price.append(cur_price)
        
    for i in datesRange:
        weekday.append(i.weekday())
        
    for i in weekday:
        if i==5 : weekend.append(1)
        elif i==6 : weekend.append(1)
        else : weekend.append(0)
        
        
    slots_filled =  round((1 - random.randint(wastage_pct_min_range,wastage_pct_max_range)/100.0) * total_slots,0)
    lst_slots = [] 
    weights = []
    for time_,p,q in zip(lst_days,lst_price,weekend):
        
        # More bookings comes with time but also reduces as price increases
        weights.append(((time_ + 1)* random.uniform(1,1.2)*(1+1.5*q))/math.pow(p,5.0))

    msum = sum(weights)
    weights = [w/msum for w in weights]

    for w in weights:
        lst_slots.append(round(w * slots_filled, 0) )

    lst_df.append(pd.DataFrame( {'journey_id' : [j+1] * days,
                                 'day':lst_days,
                                 'price' : lst_price,
                                 'slots' : lst_slots,
                                'date' : datesRange,
                                'weekday' : weekday,
                                'weekend' : weekend} ))
    

df = pd.concat(lst_df)


df_train = pd.concat(lst_df[:int(train_val_prop * len(lst_df)) + 1])
df_val = pd.concat(lst_df[int(train_val_prop * len(lst_df)) + 1:])

print("df's shape", df.shape)
print("df_train's shape", df_train.shape)
print("df_val's shape", df_val.shape)
